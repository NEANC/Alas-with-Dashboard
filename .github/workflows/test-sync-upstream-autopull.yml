name: 测试-判断改进，定时同步:最上游到auto-pull分支

on:
  schedule:
    # 每天 北京时间 04点到12点，每4小时运行一次
    # 具体时间：04:00 (UTC 20:00)，08:00 (UTC 00:00)，12:00 (UTC 04:00)
    - cron: '0 20,0,4 * * *'
  workflow_dispatch:     # 允许手动触发

env:
  # ============== 必须设置 ==============
  TOPSTREAM_REPO: "https://github.com/LmeSzinc/AzurLaneAutoScript.git"  # 最上游仓库URL
  TOPSTREAM_BRANCH: "master"  # 最上游分支名
  TARGET_BRANCH: "auto-pull"      # 本地目标分支名
  
  # ============== 可选设置 ==============
  MERGE_STRATEGY: "--allow-unrelated-histories"  # 合并策略
  GIT_USER: "GitHub Actions Bot"                # Git提交用户名

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 5  # 防止长时间运行
    
    permissions:
      contents: read
      issues: write

    steps:
      # STEP 1: 检出目标分支
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}  # 使用设置的目标分支
          fetch-depth: 0

      # STEP 2: 添加最上游远程
      - name: Add topstream remote
        run: |
          git remote add topstream ${{ env.TOPSTREAM_REPO }}

      # STEP 3: 检查上游更新
      - name: Check for updates
        id: check-updates
        run: |
          # 获取本地分支最新提交
          LOCAL_COMMIT=$(git rev-parse HEAD)
          
          # 获取上游最新提交
          git fetch topstream ${{ env.TOPSTREAM_BRANCH }} --depth=1
          UPSTREAM_COMMIT=$(git rev-parse topstream/${{ env.TOPSTREAM_BRANCH }})
          
          echo "本地最新提交: $LOCAL_COMMIT"
          echo "上游最新提交: $UPSTREAM_COMMIT"
          
          if [ "$LOCAL_COMMIT" = "$UPSTREAM_COMMIT" ]; then
            echo "status=no-update" >> $GITHUB_OUTPUT
            echo "::notice::上游未更新，跳过合并"
          else
            echo "status=update-available" >> $GITHUB_OUTPUT
            echo "::notice::发现提交，运行合并"
            echo "new_commit=$UPSTREAM_COMMIT" >> $GITHUB_OUTPUT
          fi

      # STEP 4: 仅当有更新时继续
      - name: Full fetch if updates available
        if: steps.check-updates.outputs.status == 'update-available'
        run: |
          # 完整获取历史
          git fetch topstream ${{ env.TOPSTREAM_BRANCH }} --unshallow

      # STEP 5: 尝试合并
      - name: Merge updates
        if: steps.check-updates.outputs.status == 'update-available'
        id: merge
        run: |
          git config user.name "${{ env.GIT_USER }}"
          git config user.email "actions@users.noreply.github.com"
          
          # 尝试合并
          if git merge topstream/${{ env.TOPSTREAM_BRANCH }} ${{ env.MERGE_STRATEGY }} -m "Merge upstream updates (${{ steps.check-updates.outputs.new_commit }})"; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            # 检测真实冲突
            if [ -n "$(git status --porcelain)" ]; then
              echo "::error::合并冲突!"
              exit 1
            else
              echo "status=no-changes" >> $GITHUB_OUTPUT
            fi
          fi

      # STEP 6: 推送更新
      - name: Push changes
        if: |
          steps.check-updates.outputs.status == 'update-available' &&
          steps.merge.outputs.status == 'success'
        permissions:
          contents: write  # 临时提升权限
        run: |
          echo "推送更新到 ${{ env.TARGET_BRANCH }} 分支"
          git push origin ${{ env.TARGET_BRANCH }}

      # STEP 7: 冲突处理
      - name: Create issue on conflict
        if: ${{ failure() && steps.merge.conclusion == 'failure' }}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `⚠️ 合并冲突: ${process.env.TARGET_BRANCH} 分支`,
              body: `自动合并失败！需要手动解决冲突：\n\n` +
                    `上游仓库: ${process.env.TOPSTREAM_REPO}\n` +
                    `目标分支: ${process.env.TARGET_BRANCH}\n\n` +
                    `工作流运行: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            })

      # STEP 8: 成功通知
      - name: Success notification
        if: steps.merge.outputs.status == 'success'
        run: |
          echo "✅ 成功合并上游更新到 ${{ env.TARGET_BRANCH }} 分支"
          echo "新提交: ${{ steps.check-updates.outputs.new_commit }}"